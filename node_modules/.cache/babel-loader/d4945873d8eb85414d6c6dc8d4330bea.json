{"ast":null,"code":"var _jsxFileName = \"/Users/rahilpatel/Desktop/Programming/Projects/Personal/covid19/covid-19-visualization/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Page from './Figures/states.html';\nimport Plot from 'react-plotly.js';\nimport parse from 'html-react-parser';\nimport countries_json from './Figures/countries.json';\nimport states_json from './Figures/states.json';\nimport counties_json from './Figures/counties.json';\n/*\nlet JsonReader = require('big-json-reader')\nlet reader = new JsonReader(require.resolve('./Figures/counties.json'));\nreader.read(json => {\n  console.log(json)\n}, totalObjects => {\n  console.log(\"totalObjects\", totalObjects);\n  reader.printUsage();\n})\n*/\n// console.log('Counties:', counties_json)\n// function fetchJSONFile(path, callback) {\n//     var httpRequest = new XMLHttpRequest();\n//     httpRequest.onreadystatechange = function() {\n//         if (httpRequest.readyState === 4) {\n//             if (httpRequest.status === 200) {\n//               console.log('TEST:', httpRequest.responseText)\n//                 var data = JSON.parse(httpRequest.responseText);\n//                 if (callback) callback(data);\n//             }\n//         }\n//     };\n//     httpRequest.open('GET', path);\n//     httpRequest.send(); \n// }\n// this requests the file and executes a callback with the parsed result once\n//   it is available\n// fetchJSONFile('counties.json', function(data){\n//     // do something with your data\n//     console.log('DATA:')\n//     console.log(data);\n// });\n\nfunction App() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction renderHTML() {\n  console.log('Rendering HTML:');\n  console.log(Page.substring(Page.length - 7));\n  console.log(Page.substring(0, 6)); // return Page\n\n  return Page.substring(7, Page.length - 8);\n}\n\nconst scopes = {\n  COUNTIES: 'counties',\n  STATES: 'states',\n  GLOBAL: 'global'\n};\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      scope: scopes.GLOBAL\n    };\n    this.switchMap = this.switchMap.bind(this);\n    this.choose = this.choose.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        console.log('States clicked');\n        this.setState({\n          scope: scopes.STATES\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }, \"US States\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        console.log('Global clicked');\n        this.setState({\n          scope: scopes.GLOBAL\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, \"World\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        console.log('Global clicked');\n        this.setState({\n          scope: scopes.COUNTIES\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, \"US Counties\"), this.choose());\n  }\n\n  choose() {\n    switch (this.state.scope) {\n      case scopes.COUNTIES:\n        return this.renderMap(counties_json);\n\n      case scopes.STATES:\n        return this.renderMap(states_json);\n\n      case scopes.GLOBAL:\n        return this.renderMap(countries_json);\n    }\n  }\n\n  switchMap() {\n    this.setState({\n      countriesVisible: !this.state.countriesVisible,\n      statesVisible: !this.state.statesVisible\n    });\n    console.log('Done ', this.state.statesVisible);\n  }\n\n  renderMap(json) {\n    console.log(json);\n    console.log(json.data); // var figure = JSON.parse(json)\n    //var plot = Plotly.newPlot('graph-div', figure.data, figure.layout);\n\n    var lay = json.layout;\n    lay.height = 1000;\n    lay.width = 1000;\n    return /*#__PURE__*/React.createElement(Plot, {\n      data: json.data,\n      layout: lay,\n      frames: json.frames,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    });\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/rahilpatel/Desktop/Programming/Projects/Personal/covid19/covid-19-visualization/src/App.js"],"names":["React","Page","Plot","parse","countries_json","states_json","counties_json","App","renderHTML","console","log","substring","length","scopes","COUNTIES","STATES","GLOBAL","Map","Component","constructor","props","state","scope","switchMap","bind","choose","render","setState","renderMap","countriesVisible","statesVisible","json","data","lay","layout","height","width","frames"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Page from './Figures/states.html';\nimport Plot from 'react-plotly.js';\nimport parse from 'html-react-parser'\nimport countries_json from './Figures/countries.json'\nimport states_json from './Figures/states.json'\nimport counties_json from './Figures/counties.json'\n/*\nlet JsonReader = require('big-json-reader')\nlet reader = new JsonReader(require.resolve('./Figures/counties.json'));\nreader.read(json => {\n  console.log(json)\n}, totalObjects => {\n  console.log(\"totalObjects\", totalObjects);\n  reader.printUsage();\n})\n*/\n\n// console.log('Counties:', counties_json)\n// function fetchJSONFile(path, callback) {\n//     var httpRequest = new XMLHttpRequest();\n//     httpRequest.onreadystatechange = function() {\n//         if (httpRequest.readyState === 4) {\n//             if (httpRequest.status === 200) {\n//               console.log('TEST:', httpRequest.responseText)\n//                 var data = JSON.parse(httpRequest.responseText);\n//                 if (callback) callback(data);\n//             }\n//         }\n//     };\n//     httpRequest.open('GET', path);\n//     httpRequest.send(); \n// }\n\n// this requests the file and executes a callback with the parsed result once\n//   it is available\n// fetchJSONFile('counties.json', function(data){\n//     // do something with your data\n//     console.log('DATA:')\n//     console.log(data);\n// });\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map/>\n    </div>\n  );\n}\nfunction renderHTML() {\n  console.log('Rendering HTML:')\n  console.log(Page.substring(Page.length - 7))\n  console.log(Page.substring(0, 6))\n  // return Page\n  return Page.substring(7, Page.length - 8)\n}\nconst scopes = {\n  COUNTIES: 'counties',\n  STATES: 'states',\n  GLOBAL: 'global'\n}\nclass Map extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {scope: scopes.GLOBAL}\n    this.switchMap = this.switchMap.bind(this)\n    this.choose = this.choose.bind(this)\n  }\n  render() {\n    return(\n      <div>\n        <button onClick={() => {\n          console.log('States clicked')\n          this.setState({scope: scopes.STATES})\n        }}>\n          US States\n        </button>\n        <button onClick={() => {\n          console.log('Global clicked')\n          this.setState({scope: scopes.GLOBAL})\n        }}>\n          World\n        </button>\n        <button onClick={() => {\n          console.log('Global clicked')\n          this.setState({scope: scopes.COUNTIES})\n        }}>\n          US Counties\n        </button>\n        { this.choose() }\n      </div>\n    );\n  }\n  choose() {\n    switch(this.state.scope) {\n            case scopes.COUNTIES:\n              return this.renderMap(counties_json);\n            case scopes.STATES:\n              return this.renderMap(states_json)\n            case scopes.GLOBAL:\n              return this.renderMap(countries_json)\n          }\n  }\n  switchMap() {\n    this.setState({countriesVisible: !this.state.countriesVisible, statesVisible: !this.state.statesVisible})\n    console.log('Done ', this.state.statesVisible);\n  }\n\n  renderMap(json) {\n    console.log(json)\n    console.log(json.data)\n    // var figure = JSON.parse(json)\n    //var plot = Plotly.newPlot('graph-div', figure.data, figure.layout);\n    var lay = json.layout\n    lay.height = 1000\n    lay.width = 1000\n    return (\n        <Plot\n          data={json.data}\n          layout={lay}\n          frames={json.frames}\n        />\n      )\n  }\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}