{"ast":null,"code":"/*jshint multistr: true ,node: true*/\n\"use strict\";\n\nlet fs = require('fs');\n\nlet OPEN = '{',\n    CLOSE = '}';\n\nclass CharReader {\n  constructor(filepath) {\n    this.filepath = filepath;\n    this.offset = 0;\n    this.position = -1;\n    this.eof = false;\n    this.buffer = new Buffer(this.MAX_BUFFER);\n    this.str = '';\n    this.fd = fs.openSync(this.filepath, 'r');\n  }\n\n  isEof() {\n    return this.eof;\n  }\n\n  fillBuffer() {\n    let length = fs.readSync(this.fd, this.buffer, this.offset, this.MAX_BUFFER, null);\n\n    if (length == 0) {\n      this.eof = true;\n    }\n\n    return length;\n  }\n\n  getNextChar() {\n    if (this.eof) {\n      return false;\n    }\n\n    this.position++;\n    let char = this.buffer[this.position];\n\n    if (char === 0 || char === undefined) {\n      // we have empty buffer\n      this.fillBuffer();\n      this.position = -1;\n      return this.getNextChar();\n    }\n\n    char = String.fromCharCode(char);\n    return char;\n  }\n\n}\n\nCharReader.prototype.MAX_BUFFER = 1024;\n\nclass LineReader extends CharReader {\n  constructor(filepath) {\n    super(filepath);\n  }\n\n  getNextLine(trim = true) {\n    let line = '';\n\n    while (!this.eof) {\n      let char = this.getNextChar();\n\n      if (char == '\\n') {\n        if (trim) {\n          line = line.trim();\n        }\n\n        return line;\n      }\n\n      line += char;\n    }\n  }\n\n}\n/**\n * \n * @param {JSON} json \n * @returns {Promise}\n */\n\n\nfunction onJson(json) {}\n/**\n * \n * @param {number} totalObjects \n */\n\n\nfunction onEnd(totalObjects) {}\n\nfunction callback(onJSON, onEnd) {}\n\nclass JsonReader extends CharReader {\n  constructor(filepath) {\n    super(filepath);\n    this.json = '';\n    this.counter = 0;\n    this.totalObjects = 0;\n    this.regOpen = new RegExp(OPEN, \"g\");\n    this.regClose = new RegExp(CLOSE, \"g\");\n  }\n\n  reset() {\n    this.json = '';\n    this.counter = 0;\n  }\n\n  count() {\n    let open = (this.json.match(this.regOpen) || []).length;\n    let close = (this.json.match(this.regClose) || []).length;\n    return open > 0 && open == close;\n  }\n\n  printUsage() {\n    const used = process.memoryUsage().heapUsed / 1024 / 1024;\n    console.log(`\\n\\nThe script uses approximately ${Math.round(used * 100) / 100} MB`);\n  }\n\n  jsonFound() {\n    return this.counter != 0;\n  }\n\n  isValid() {\n    return this.counter == 0 && this.json != '' && this.count();\n  }\n  /**\n   * \n   * @param {onJson} onJson \n   * @param {onEnd} onEnd \n   */\n\n\n  read(onJson, onEnd) {\n    while (!this.eof) {\n      let char = this.getNextChar();\n\n      if (char == OPEN) {\n        this.counter++;\n      } // if we have started a valide json\n\n\n      if (this.jsonFound()) {\n        this.json += char;\n      }\n\n      if (char == CLOSE) {\n        this.counter--;\n      } // if we have got a copmlete valid json\n\n\n      if (this.isValid()) {\n        try {\n          this.json = JSON.parse(this.json);\n        } catch (error) {\n          this.reset();\n          return;\n        }\n\n        onJson(this.json).then(() => {\n          this.totalObjects++;\n          this.reset();\n          this.read(onJson, onEnd);\n        }).catch(() => {\n          this.reset();\n          this.read(onJson, onEnd);\n        });\n        return;\n      }\n    }\n\n    if (this.eof && onEnd) {\n      onEnd(this.totalObjects);\n    }\n  }\n\n}\n\nmodule.exports = JsonReader;","map":{"version":3,"sources":["/Users/rahilpatel/Desktop/Programming/Projects/Personal/Coronavirus/covid-19-visualization/node_modules/big-json-reader/reader.js"],"names":["fs","require","OPEN","CLOSE","CharReader","constructor","filepath","offset","position","eof","buffer","Buffer","MAX_BUFFER","str","fd","openSync","isEof","fillBuffer","length","readSync","getNextChar","char","undefined","String","fromCharCode","prototype","LineReader","getNextLine","trim","line","onJson","json","onEnd","totalObjects","callback","onJSON","JsonReader","counter","regOpen","RegExp","regClose","reset","count","open","match","close","printUsage","used","process","memoryUsage","heapUsed","console","log","Math","round","jsonFound","isValid","read","JSON","parse","error","then","catch","module","exports"],"mappings":"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","sourcesContent":["/*jshint multistr: true ,node: true*/\n\"use strict\";\n\nlet \n    fs          = require('fs');\n\nlet \n    OPEN    = '{',\n    CLOSE   = '}';\n\nclass CharReader {\n\n    constructor(filepath) {\n        this.filepath   = filepath;\n        this.offset     = 0;\n        this.position   = -1;\n        this.eof        = false;\n        this.buffer     = new Buffer(this.MAX_BUFFER);\n        this.str        = '';\n        this.fd         = fs.openSync(this.filepath, 'r');\n    }\n\n    isEof() {\n        return this.eof;\n    }\n\n    fillBuffer() {\n        let length = fs.readSync(this.fd, this.buffer, this.offset, this.MAX_BUFFER, null);\n        if(length == 0) {\n            this.eof = true;\n        }\n        return length;\n    }\n\n    getNextChar() {\n        if(this.eof) {\n            return false;\n        }\n        this.position++;\n        let char = this.buffer[this.position];\n        if(char === 0 || char === undefined) {\n            // we have empty buffer\n            this.fillBuffer();\n            this.position = -1;\n            return this.getNextChar();\n        }\n        char = String.fromCharCode(char);\n        return char;\n    }\n\n\n}\nCharReader.prototype.MAX_BUFFER = 1024;\n\nclass LineReader extends CharReader {\n\n    constructor(filepath) {\n        super(filepath);\n    }\n\n    getNextLine(trim = true) {\n        let line = '';\n        while(!this.eof) {\n            let char = this.getNextChar();\n            if(char == '\\n') {\n                if(trim) {\n                    line = line.trim();\n                }\n                return line;\n            }\n            line += char;\n        }\n    }\n\n}\n/**\n * \n * @param {JSON} json \n * @returns {Promise}\n */\nfunction onJson(json) {\n}\n/**\n * \n * @param {number} totalObjects \n */\nfunction onEnd(totalObjects) {\n}\n\nfunction callback(onJSON, onEnd) {\n}\n\nclass JsonReader extends CharReader {\n\n    constructor(filepath) {\n        super(filepath);\n        this.json           = '';\n        this.counter        = 0;\n        this.totalObjects   = 0;\n        this.regOpen        = new RegExp(OPEN, \"g\");\n        this.regClose       = new RegExp(CLOSE, \"g\");\n    }\n\n    reset() {\n        this.json = '';\n        this.counter = 0;\n    }\n\n    count() {\n        let open    = (this.json.match(this.regOpen) || []).length;\n        let close   = (this.json.match(this.regClose) || []).length;\n        return open > 0 && open == close;\n    }\n    \n    printUsage() {\n        const used = process.memoryUsage().heapUsed / 1024 / 1024;\n        console.log(`\\n\\nThe script uses approximately ${Math.round(used * 100) / 100} MB`);\n    }\n\n    jsonFound() {\n        return this.counter != 0;\n    }\n\n    isValid() {\n        return this.counter == 0 && this.json != '' && this.count();\n    }\n\n    /**\n     * \n     * @param {onJson} onJson \n     * @param {onEnd} onEnd \n     */\n    read(onJson, onEnd) {\n        while(!this.eof) {\n            let char = this.getNextChar();\n            if(char == OPEN) {\n                this.counter++;\n            }\n            // if we have started a valide json\n            if(this.jsonFound()) {\n                this.json += char;\n            }\n\n            if(char == CLOSE) {\n                this.counter--;\n            }\n\n            // if we have got a copmlete valid json\n            if(this.isValid()) {\n                try {\n                    this.json = JSON.parse(this.json);\n                } catch (error) {\n                    this.reset();\n                    return;\n                }\n                onJson(this.json)\n                .then(() => {\n                    this.totalObjects++;\n                    this.reset();\n                    this.read(onJson, onEnd);\n                }).catch(() => {\n                    this.reset();\n                    this.read(onJson, onEnd);\n                });\n                return;\n            }\n        }\n        if(this.eof && onEnd) {\n            onEnd(this.totalObjects);\n        }\n    }\n}\n\nmodule.exports = JsonReader;"]},"metadata":{},"sourceType":"script"}